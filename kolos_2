# Wiktor Jakacki 169247 Wariant 18
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

#Zad1
nazwa_rzeki=np.array(['Amazonka','Nil','Jangcy','Missisipi-Missouri','Huang He','Ob Irtysz','Kongo','Mekong','Amur','Lena','Parana','Mackanzie','Niger','Jenisej','Wołga'])
kontynent=np.array(['Ameryka Południowa','Afryka','Eurazja','Ameryka Północna','Eurazja','Eurazja','Afryka','Eurazja','Eurazja','Eurazja','Ameryka Południowa','Ameryka Północna','Afryka','Eurazja','Eurazja'])
dlugosc=np.array([7040,6695,6300,6020,5464,5410,4700,4500,4440,4400,4380,4240,4160,4102,3530])
powierzchnia=np.array([7200,2870,1807,3229,752,2972,3690,810,1855,2490,3100,1760,2117,2580,1360])
liczba_panstw=np.array([3,7,1,1,1,3,3,6,3,1,3,1,4,2,2])

#Ile rzek jest w tabelce?
print(f' liczba rzek : {len(nazwa_rzeki)}')

# Ile jest w Eurazji
rzeki_eurazji = nazwa_rzeki[kontynent == 'Eurazja']
liczba_rzek_eurazji = len(rzeki_eurazji)
print("Liczba rzek w Eurazji:", liczba_rzek_eurazji)

#Wypisz nazwy rzek, który zaczynaja sie z liter pózniejszych w alfabecie, niz 'N'
print("Rzeki, które zaczynaja sie pozniej niz 'N':", nazwa_rzeki[nazwa_rzeki > 'N'])

# Ile rzek przeplywaja wiecej niz przez 2 Panstwa?
print("Liczba rzek przepływających przez więcej niż dwa państwa:", len(nazwa_rzeki[liczba_panstw > 2]))

#Wypisz nazwy rzek z dlugosci nie mniejsze niz 4500 km, który sa w Eurazji lub w Afryce
print(nazwa_rzeki[(dlugosc >= 4500) & ((kontynent == 'Eurazja') | (kontynent == 'Afryka'))])

#Posortuj nazwy wszystkich rzek weddug powierzchni malejaco
indeksy_posortowane = np.argsort(powierzchnia)[::-1]
rzeki_posortowane = nazwa_rzeki[indeksy_posortowane]
print("\n".join(rzeki_posortowane))


#Zad 2

x = np.linspace(0, 1, 100)
y1 = x**2
y2 = np.sqrt(x)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 6))
ax1.plot(x, y1, 'r-',label='x^2')
ax2.plot(x, y2, 'b:',label='sqrt(x)')
fig.legend(loc=2)
plt.show()

#Zad 3
data = pd.read_csv('galaxies.csv', sep=",", index_col=False, encoding="UTF-8")
#znajdz najwiekszy dystans do galaktyki, wykrytej metod¡ 'Transit'?
max_distance = data.loc[data['method'] == 'Transit', 'distance'].max()
print("Największy dystans do galaktyki wykrytej metodą 'Transit':", max_distance)

#W którym roku wykryto najwiecej galaktyk?
galaxies_per_year = data['year'].value_counts()
max_year = galaxies_per_year.idxmax()
print("Rok, w którym wykryto najwięcej galaktyk:", max_year)

#Narysuj wykres kołowy, dotycz¡ce ilosci galaktyk, wykrytych każda metoda
method_counts = data['method'].value_counts()
plt.figure(figsize=(8, 6))
plt.pie(method_counts, labels=method_counts.index, autopct='%1.1f%%')
plt.title("Ilość galaktyk wykrytych dla każdej metody")
plt.axis('equal')
plt.show()

#Narysuj wykres punktowy zaleznosci dystansu od roku. Kolorem oznacz metody wykrywania.

color_mapping = {
    'Astrometry': 'black',
    'Radial Velocity': 'navy',
    'Transit': 'red',
    'Imaging': 'green',
    'Eclipse Timing Variations': 'purple'
}
plt.scatter(data['year'], data['distance'], c=data['method'].map(color_mapping))
plt.xlabel('Rok')
plt.ylabel('Dystans')
plt.title('Zależność dystansu od roku dla różnych metod wykrywania')
plt.grid(True)
plt.show()


#Zad 4
data = pd.read_csv('iris.csv', sep=",", index_col=False, encoding="UTF-8")

petal_length = data['petal_length']
petal_width = data['petal_width']
sepal_length = data['sepal_length']
sepal_width = data['sepal_width']
species = data['species']

markers = {'versicolor': 'x', 'virginica': 's', 'setosa': 'o'}

for species_name in species.unique():
    marker = markers.get(species_name, 'o')
    plt.scatter(petal_length[species == species_name], petal_width[species == species_name],
                c=sepal_width[species == species_name], s=sepal_length[species == species_name]*5,
                cmap='Greens', alpha=0.8, label=species_name, marker=marker)

plt.xlabel('Petal Length')
plt.ylabel('Petal Width')


legend_handles = []
for species_name in species.unique():
    marker = markers.get(species_name, 'o')
    legend_handles.append(plt.scatter([], [], marker=marker, label=species_name))

plt.legend(handles=legend_handles, title='Species')

plt.show()


